#!/usr/bin/python3

import base64
import re
import sys

from cryptography.hazmat.primitives.asymmetric import ec, ed448, ed25519, rsa
from cryptography.hazmat.primitives.serialization import Encoding, PublicFormat

if sys.argv[1] == "-":
    f = sys.stdin
else:
    f = open(sys.argv[1], encoding="ascii", errors="replace")

content = f.read()

out = re.findall("25[67] 3 [0-9]{1,2} [A-Za-z0-9/+= ]*", content)

for rec in out:
    o = rec.split(" ", 3)
    keytype = int(o[2])
    key = base64.b64decode(o[3].replace(" ", ""))
    if keytype in {1, 5, 7, 8, 10}:
        if key[0] == 1:
            e = int.from_bytes(key[1:2], byteorder="big")
            n = int.from_bytes(key[2:], byteorder="big")
        elif key[0] == 3:
            e = int.from_bytes(key[1:4], byteorder="big")
            n = int.from_bytes(key[4:], byteorder="big")
        else:
            print("broken")
            continue
        key = rsa.RSAPublicNumbers(e, n).public_key()
    elif keytype == 13:
        if len(key) != 64:
            print("Wrong key size {len(key)} for ECDSA/P256, expected 64")
            continue
        x = int.from_bytes(key[0:32], byteorder="big")
        y = int.from_bytes(key[32:64], byteorder="big")
        key = ec.EllipticCurvePublicNumbers(x, y, ec.SECP256R1()).public_key()
    elif keytype == 14:
        if len(key) != 96:
            print("Wrong key size {len(key)} for ECDSA/P384, expected 96")
            continue
        x = int.from_bytes(key[0:48], byteorder="big")
        y = int.from_bytes(key[48:96], byteorder="big")
        key = ec.EllipticCurvePublicNumbers(x, y, ec.SECP384R1()).public_key()
    elif keytype == 15:
        if len(key) != 32:
            print("Wrong key size {len(key)} for Ed25519, expected 32")
        key = ed25519.Ed25519PublicKey.from_public_bytes(key)
    elif keytype == 16:
        if len(key) != 57:
            print("Wrong key size {len(key)} for Ed448, expected 57")
        key = ed448.Ed448PublicKey.from_public_bytes(key)
    else:
        print("Unsupported key type")
        continue

    pem = key.public_bytes(Encoding.PEM, PublicFormat.SubjectPublicKeyInfo)
    print(pem.decode(), end="")
